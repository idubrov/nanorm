<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<book>
  <bookinfo>
    <title>Nanorm</title>
    <subtitle>Developer Guide</subtitle>
    <author>
      <firstname>Ivan</firstname>
      <surname>Dubrov</surname>
      <email>wfragg@gmail.com</email>
    </author>
    <releaseinfo>1.0 (trunk)</releaseinfo>
    <pubdate>August xx, 2008</pubdate>
  </bookinfo>
  <chapter>
    <title>Introduction</title>
    <para>The Nanorm Data Mapper framework helps you to omit a lot of
      book-keeping code otherwise required to access a relational
      database. Nanorm is nothing more than a simple mapper from Java
      Bean to the SQL statement parameters and SQL ResultSet to the
      JavaBean. The key points are simplicity combined with Java
      type-checking. The data access layer built using this framework is
      simply a number of mapper interfaces, the regular Java interfaces
      marked with Nanorm annotations. This approach enables easy
      unit-testing and allows the framework to perform all required type
      checks.</para>
    <section>
      <title>Concept</title>
      <para>The Nanorm API provides most common JDBC functionality
        with much less code required from the developer, providing
        proper type safety and little performance overhead at the same
        time.</para>
    </section>
    <section>
      <title>Nanorm principles</title>
      <para>
        Nanorm is built around the concept of
        <emphasis>mapper</emphasis>
        , regular Java interface marked with certain Nanorm annotations.
        The idea is that developer writes the interface with methods
        formulated in terms of database queries (each method
        representing a single database query, probably with subqueries)
        and annotates them with query SQL and the results mapping.
        Behind the scenes, the Nanorm parses all configuration from
        given set of interfaces and provides the instances of these
        interfaces. By invoking the methods on provided instance, the
        application can make database queries. The typical query works
        like the following:
        <orderedlist>
          <listitem>
            <simpara>The application prepares the array of query
              parameters (which could include Java Beans, primitive
              types or primitive wrappers).</simpara>
          </listitem>
          <listitem>
            <simpara>The application invokes a method on the mapper
              interface, passing the parameters.</simpara>
          </listitem>
          <listitem>
            <simpara>Nanorm on its side maps method parameters to
              the JDBC PreparedStatement instance and executes the
              query.</simpara>
          </listitem>
          <listitem>
            <simpara>The query result (either JDBC
              <classname>ResultSet</classname>
              or integer representing the number of rows affected) is
              mapped to the declared method return value (which could be
              primitive type, Java Bean, collection or primitive
              wrapper).</simpara>
          </listitem>
        </orderedlist>
      </para>
    </section>
    <section>
      <title>Installation</title>
      <para>To install the Nanorm you simply need to put certain JAR
        files to the application classpath. 
      </para>
    </section>
  </chapter>
  <chapter>
    <title>Installing</title>
    <para>
      See
      <link linkend="maven.sample" endterm="maven.sample.title" />
      for configuring the Maven2-based build.
    </para>
  </chapter>
  <chapter>
    <title>Title2</title>
    <para>Chapter2</para>
  </chapter>
  <appendix id="maven.sample">
    <title id="maven.sample.title">Maven2 pom.xml example</title>
    <programlisting language="xml"><![CDATA[<project>
  ...
  <repositories>
    ...
    <repository>
      <id>nanorm-releases-repo</id>
      <name>Repository on code.google.com</name>
      <url>http://nanorm.googlecode.com/svn/maven2/releases/</url>
      <snapshots><enabled>false</enabled></snapshots>
    </repository>
    ...
  </repositories>
  ...
  <dependencies>
    ...
    <dependency>
      <groupId>com.google.code.nanorm</groupId>
      <artifactId>nanorm</artifactId>
      <version>0.1.0</version>
    </dependency>
    ...
  </dependencies>
  ...
</project>]]>
    </programlisting>
  </appendix>
</book>
